name: CI Pipeline
on: [push]

jobs:
  project-testing:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run DVC pipeline
        env:
          AWS_ACCESS_KEY_ID:    ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          CAPSTONE_TEST:         ${{ secrets.CAPSTONE_TEST }}
        run: dvc repro

      - name: Run model tests
        env:
          CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}
        run: python -m unittest tests/test_model.py

      - name: Promote model to production
        if: success()
        env:
          CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}
        run: python scripts/promote_model.py

      - name: Run Flask app tests
        if: success()
        env:
          CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}
        run: python -m unittest tests/test_flask_app.py

      # ─────────────────────────────────────────
      # → DigitalOcean Container Registry (DOCR)
      # ─────────────────────────────────────────

      - name: Log in to DOCR
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_TOKEN }}
      - run: doctl registry login

      - name: Build & Tag Docker image
        run: |
          docker build -t flask-app:latest .
          docker tag flask-app:latest \
            ${{ secrets.DO_REGISTRY }}/flask-app:latest

      - name: Push to DOCR
        run: |
          docker push ${{ secrets.DO_REGISTRY }}/flask-app:latest

      # ─────────────────────────────────────────
      # → Deploy to DOKS
      # ─────────────────────────────────────────

      - name: Install kubectl & doctl kubernetes plugin
        run: |
          sudo snap install kubectl --classic
          doctl kubernetes cluster kubeconfig save ${{ secrets.DO_CLUSTER_NAME }}

      - name: Create capstone-secret
        run: |
          kubectl create secret generic capstone-secret \
            --from-literal=CAPSTONE_TEST=${{ secrets.CAPSTONE_TEST }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to DOKS
        run: kubectl apply -f deployment.yaml
