name: CI Pipeline

on: push

jobs:
  project-testing:
    runs-on: ubuntu-latest
    env:
      CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run DVC pipeline
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: dvc repro

      - name: Run model tests
        run: python -m unittest tests/test_model.py

      - name: Promote model to production
        if: success()
        run: python scripts/promote_model.py

      - name: Run Flask app tests
        if: success()
        run: python -m unittest tests/test_flask_app.py

      # ──────────────────────────────────────────────────────────────────────────
      # → OCI / OCIR / OKE deployment
      # ──────────────────────────────────────────────────────────────────────────

      - name: Log in to OCIR (Oracle Container Registry)
        env:
          OCIR_AUTH_TOKEN: ${{ secrets.OCIR_AUTH_TOKEN }}
        run: |
          echo "${OCIR_AUTH_TOKEN}" \
            | docker login "${{ secrets.OCI_REGION }}.ocir.io" \
                --username "${{ secrets.OCI_TENANCY_NAMESPACE }}/${{ secrets.OCI_USERNAME }}" \
                --password-stdin

      - name: Build & tag Docker image
        run: |
          docker build -t flask-app:latest .
          docker tag flask-app:latest \
            ${{ secrets.OCI_REGION }}.ocir.io/${{ secrets.OCI_TENANCY_NAMESPACE }}/flask-app/flask-app:latest

      - name: Push Docker image to OCIR
        run: |
          docker push ${{ secrets.OCI_REGION }}.ocir.io/${{ secrets.OCI_TENANCY_NAMESPACE }}/flask-app/flask-app:latest

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure OCI CLI & kubeconfig
        uses: oracle-actions/run-oci-cli-command@v1.3.2
        env:
          OCI_CLI_USER:        ${{ secrets.OCI_USER_OCID }}
          OCI_CLI_TENANCY:     ${{ secrets.OCI_TENANCY_OCID }}
          OCI_CLI_FINGERPRINT: ${{ secrets.OCI_FINGERPRINT }}
          OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_PRIVATE_KEY }}
          OCI_CLI_REGION:      ${{ secrets.OCI_REGION }}
        with:
          command: |
            ce cluster create-kubeconfig \
              --cluster-id ${{ secrets.OCI_CLUSTER_OCID }} \
              --file $HOME/.kube/config \
              --token-version 2.0.0

      - name: Create Kubernetes Secret for MLflow
        run: |
          kubectl create secret generic capstone-secret \
            --from-literal=CAPSTONE_TEST=${{ secrets.CAPSTONE_TEST }} \
            --dry-run=client -o yaml \
          | kubectl apply -f -

      - name: Deploy to OKE
        run: |
          kubectl apply -f deployment.yaml
