name: CI Pipeline

on:
  push:
    branches: [main]

jobs:
  project-testing:
    runs-on: ubuntu-latest

    steps:
      # ───────────────────────────────────────────────
      # 1) Checkout & Python setup
      # ───────────────────────────────────────────────
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

      - run: pip install -r requirements.txt

      # ───────────────────────────────────────────────
      # 2) Run DVC pipeline & tests
      # ───────────────────────────────────────────────
      - name: Run DVC pipeline
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          CAPSTONE_TEST:         ${{ secrets.CAPSTONE_TEST }}
        run: dvc repro

      - name: Run model tests
        env:
          CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}
        run: python -m unittest tests/test_model.py

      - name: Promote model to production
        if: success()
        env:
          CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}
        run: python scripts/promote_model.py

      - name: Run Flask app tests
        if: success()
        env:
          CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}
        run: python -m unittest tests/test_flask_app.py

      # ───────────────────────────────────────────────
      # 3) Install & configure OCI CLI
      # ───────────────────────────────────────────────
      - run: pip install oci-cli

      - name: Configure OCI CLI files
        run: |
          mkdir -p $HOME/.oci
          cat > $HOME/.oci/config <<EOF
          [DEFAULT]
          user=${{ secrets.OCI_USER_OCID }}
          fingerprint=${{ secrets.OCI_FINGERPRINT }}
          key_file=${{ github.workspace }}/oci_api_key.pem
          tenancy=${{ secrets.OCI_TENANCY_OCID }}
          region=${{ secrets.OCI_REGION }}
          EOF
          echo "${{ secrets.OCI_PRIVATE_KEY }}" | base64 -d > oci_api_key.pem
          chmod 600 oci_api_key.pem

      # ───────────────────────────────────────────────
      # 4) Build & push Docker image to OCIR
      # ───────────────────────────────────────────────
      - name: Docker login to OCIR
        run: |
          echo "${{ secrets.OCIR_AUTH_TOKEN }}" \
            | docker login "${{ secrets.OCI_REGION }}.ocir.io" \
              --username "${{ secrets.OCI_TENANCY_NAMESPACE }}/${{ secrets.OCI_USERNAME }}" \
              --password-stdin

      - name: Build & push image
        run: |
          docker build -t flask-app:latest .
          docker tag flask-app:latest \
            ${{ secrets.OCI_REGION }}.ocir.io/${{ secrets.OCI_TENANCY_NAMESPACE }}/flask-app/flask-app:latest
          docker push ${{ secrets.OCI_REGION }}.ocir.io/${{ secrets.OCI_TENANCY_NAMESPACE }}/flask-app/flask-app:latest

      # ───────────────────────────────────────────────
      # 5) kubectl + image‑pull‑secret + deploy to OKE
      # ───────────────────────────────────────────────
      - uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Create kubeconfig for OKE
        run: |
          oci ce cluster create-kubeconfig \
            --cluster-id ${{ secrets.OCI_CLUSTER_OCID }} \
            --file $HOME/.kube/config \
            --region ${{ secrets.OCI_REGION }}

      - name: Create OCIR pull secret
        # expose the secrets as env vars so we can quote them below
        env:
          OCI_REGION:            ${{ secrets.OCI_REGION }}
          OCI_TENANCY_NAMESPACE: ${{ secrets.OCI_TENANCY_NAMESPACE }}
          OCI_USERNAME:          ${{ secrets.OCI_USERNAME }}
          OCIR_AUTH_TOKEN:       ${{ secrets.OCIR_AUTH_TOKEN }}
        run: |
          kubectl create secret docker-registry ocir-secret \
            --docker-server="${OCI_REGION}.ocir.io" \
            --docker-username="${OCI_TENANCY_NAMESPACE}/${OCI_USERNAME}" \
            --docker-password="${OCIR_AUTH_TOKEN}" \
            --docker-email="you@example.com" \
            --dry-run=client -o yaml \
          | kubectl apply -f -

      - name: Create CAPSTONE_TEST secret
        run: |
          kubectl create secret generic capstone-secret \
            --from-literal=CAPSTONE_TEST=${{ secrets.CAPSTONE_TEST }} \
            --dry-run=client -o yaml \
          | kubectl apply -f -

      - name: Deploy to OKE
        run: kubectl apply -f deployment.yaml
